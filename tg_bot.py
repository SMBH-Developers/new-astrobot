import asyncio

from aiogram import Bot, Dispatcher, executor, types, exceptions
from aiogram.utils import markdown
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import StatesGroup, State
from aiogram.contrib.fsm_storage.redis import RedisStorage2
from loguru import logger

from src.config import Texts
from src.common import settings
from src.keyboards import Markups, MenuButton
from src.models import db, db_sendings


storage = RedisStorage2(db=settings.redis_db, pool_size=40)
bot = Bot(settings.tg_token)
dp = Dispatcher(bot, storage=storage)
ADMIN_IDS = (1188441997, 791363343)


BF_PEOPLE = [791363343, 923202245, 1633990660, 1188441997, 627568042]


class Form(StatesGroup):
    age = State()


@dp.message_handler(commands=['start'], state='*')
async def start_mes(message: types.Message, state: FSMContext) -> None:
    await state.finish()
    await message.answer(Texts.welcome_text, reply_markup=Markups.welcome_mrkup, parse_mode='html')
    await db.registrate_if_not_exists(message.from_user.id)
    await asyncio.sleep(1)
    await message.answer(Texts.menu, reply_markup=MenuButton.main_menu_mrkup, parse_mode='html')


@dp.callback_query_handler(lambda call: call.data == 'welcome:purpose')
async def process_callback_purpose(callback_query: types.CallbackQuery) -> None:
    inline_button = types.InlineKeyboardMarkup()
    inline_button.add(types.InlineKeyboardButton(text='ü•≥ –î–∞, –∫–æ–Ω–µ—á–Ω–æ ', callback_data='yes'))
    await bot.answer_callback_query(callback_query.id)
    await callback_query.message.answer(Texts.purpose_text, reply_markup=inline_button, parse_mode='html')


@dp.callback_query_handler(lambda call: call.data == 'welcome:horoscope')
async def process_callback_horoscope(callback_query: types.CallbackQuery) -> None:
    inline_button = types.InlineKeyboardMarkup()
    inline_button.add(types.InlineKeyboardButton(text='ü§ó –ù–∞—á–Ω–µ–º', callback_data='start'))
    await bot.answer_callback_query(callback_query.id)
    await callback_query.message.answer(Texts.horoscope_text, reply_markup=inline_button, parse_mode='html')


@dp.callback_query_handler(lambda call: call.data == 'welcome:compatibility')
async def process_callback_compatibility(callback_query: types.CallbackQuery) -> None:
    inline_button = types.InlineKeyboardMarkup()
    inline_button.add(types.InlineKeyboardButton(text='üòç –†–∞–∑–æ–±—Ä–∞—Ç—å —Å—Ñ–µ—Ä—É –æ—Ç–Ω–æ—à–µ–Ω–∏–π', callback_data='relationship'))
    await bot.answer_callback_query(callback_query.id)
    await callback_query.message.answer(Texts.compatibility_text, reply_markup=inline_button, parse_mode='html')


@dp.callback_query_handler(lambda call: call.data == 'welcome:wealth')
async def process_callback_wealth(callback_query: types.CallbackQuery) -> None:
    inline_button = types.InlineKeyboardMarkup()
    inline_button.add(types.InlineKeyboardButton(text='üòâ –ö–æ–Ω–µ—á–Ω–æ', callback_data='sure'))
    await bot.answer_callback_query(callback_query.id)
    await callback_query.message.answer(Texts.wealth_text, reply_markup=inline_button, parse_mode='html')


@dp.message_handler(lambda message: message.text in ['üìù –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –∫ –∞—Å—Ç—Ä–æ–ª–æ–≥—É', '‚ú® –í—Å–µ –æ–± –∞—Å—Ç—Ä–æ–ª–æ–≥–∏–∏'])
async def start_mes(message: types.Message) -> None:
    if message.text == 'üìù –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –∫ –∞—Å—Ç—Ä–æ–ª–æ–≥—É':
        # await message.answer(Texts.get_birthday)
        await Form.age.set()
    elif message.text == '‚ú® –í—Å–µ –æ–± –∞—Å—Ç—Ä–æ–ª–æ–≥–∏–∏':
        await message.answer(Texts.advice_day, reply_markup=Markups.main_menu_mrkup)


@dp.callback_query_handler(lambda call: call.data == 'main:map')
async def process_callback_map(callback_query: types.CallbackQuery) -> None:
    await bot.answer_callback_query(callback_query.id)
    await callback_query.message.answer(Texts.map_text)


@dp.callback_query_handler(lambda call: call.data == 'main:day')
async def process_callback_day(callback_query: types.CallbackQuery) -> None:
    await bot.answer_callback_query(callback_query.id)
    await callback_query.message.answer(Texts.advice_day)


@dp.callback_query_handler(lambda call: call.data in ['yes', 'start', 'relationship', 'sure'])
async def process_callback_yes(callback_query: types.CallbackQuery) -> None:
    await bot.answer_callback_query(callback_query.id)
    await callback_query.message.answer(Texts.get_birthday_1)
    await Form.age.set()


@dp.message_handler(state=Form.age)
async def process_age(message: types.Message, state: FSMContext):
    await message.answer(Texts.finish_text)
    await state.finish()


@dp.message_handler(lambda message: message.from_user.id in ADMIN_IDS, state='*', commands=['admin'])
@logger.catch
async def admin_menu(message: types.Message) -> None:
    await bot.send_message(message.chat.id, text='–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ', reply_markup=Markups.admin_mrkup)


@dp.callback_query_handler(lambda call: call.from_user.id in ADMIN_IDS and call.data.startswith('Admin'), state='*')
@logger.catch
async def admin_calls(call: types.CallbackQuery) -> None:
    action = '_'.join(call.data.split('_')[1:])
    if action == 'Users_Total':
        await call.message.edit_text(text=f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤—Å–µ–≥–æ: {await db.get_count_all_users()}',
                                     reply_markup=Markups.back_admin_mrkup)

    elif action == 'Users_For_TODAY':
        await call.message.edit_text(text=f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞ —Å–µ–≥–æ–¥–Ω—è: {await db.users_for_today()}',
                                     reply_markup=Markups.back_admin_mrkup)

    elif action == 'BACK':
        await call.message.edit_text(text='–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ', reply_markup=Markups.admin_mrkup)


# async def sending_messages_2h():
#     while True:
#         await asyncio.sleep(7)

#         text_for_2h_autosending = f"ü§© –°–ø–µ—à—É —Å–æ–æ–±—â–∏—Ç—å, —á—Ç–æ {markdown.hbold('–æ—Å—Ç–∞–µ—Ç—Å—è –≤—Å–µ–≥–æ 6 –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –º–µ—Å—Ç')}, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω—É—é –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É –æ—Ç —á–∞–∫—Ä–æ–ª–æ–≥–∞üßò‚Äç‚ôÄÔ∏è. \n\n–ù–µ –æ—Ç–∫–ª–∞–¥—ã–≤–∞–π—Ç–µ —Å–≤–æ–π —Å—á–∞—Å—Ç—å–µ –Ω–∞ –ø–æ—Ç–æ–ºüòä. –ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –∑–∞ —Å–æ–±–æ–π –±–µ—Å–ø–ª–∞—Ç–Ω—É—é —á–∞–∫—Ä–∞–ª—å–Ω—É—é –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É, –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—Å–∞–≤ —ç–∫—Å–ø–µ—Ä—Ç—É –ê–¥–µ–ª—å @soul_mento –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å–≤–æ—é –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è."
#         mrkup = types.InlineKeyboardMarkup()
#         mrkup.add(types.InlineKeyboardButton("–í–ø—É—Å—Ç–∏—Ç—å —Å—á–∞—Å—Ç—å–µ ‚ú®", url="https://t.me/soul_mento"))

#         users = await db_sendings.get_users_2h_autosending()
#         for user in users:
#             try:
#                 await bot.send_message(user, text_for_2h_autosending, parse_mode='html', reply_markup=mrkup)
#                 logger.info(f'ID: {user}. Got 2h_autosending')
#                 await db_sendings.mark_got_2h_autosending(user)
#                 await asyncio.sleep(0.2)
#             except (exceptions.BotBlocked, exceptions.UserDeactivated, exceptions.ChatNotFound):
#                 logger.error(f'ID: {user}. DELETED')
#                 await db.delete_user(user)
#             except Exception as ex:
#                 logger.error(f'got error: {ex}')


# async def sending_message_24_h():
#     while True:
#         await asyncio.sleep(12)

#         text_autosending_24h = f"üåñ–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, —Å–µ–≥–æ–¥–Ω—è {markdown.hbold('–õ—É–Ω–∞ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Å–∞–º–æ–π –±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω–æ–π —Ñ–∞–∑–µ')}, –ø—Ä–∏ –∫–æ—Ç–æ—Ä–æ–π –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –Ω–∞–∏–±–æ–ª–µ–µ {markdown.hbold('—Ç–æ—á–Ω—ã–π –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π —Ä–∞–∑–±–æ—Ä')} –ø–æ –Ω–∞—Ç–∞–ª—å–Ω–æ–π –∫–∞—Ä—Ç–µ. –í —á–µ—Å—Ç—å —ç—Ç–æ–≥–æ —Å–æ–±—ã—Ç–∏—è ‚Äî –∞—Å—Ç—Ä–æ–ª–æ–≥ {markdown.hbold('–í–µ—Ä–∞ –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç –¥–ª—è –í–∞—Å –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π —Ä–∞–∑–±–æ—Ä.')}\n\nüßò‚Äç‚ôÄÔ∏è–í –Ω–µ–º –í—ã —É–∑–Ω–∞–µ—Ç–µ –æ —Ç–æ–º, –∫–∞–∫—É—é {markdown.hbold('–¥–æ—Ä–æ–≥—É —Å–æ–≤–µ—Ç—É—é—Ç –≤—ã–±—Ä–∞—Ç—å –∑–≤–µ–∑–¥—ã,')} –∫–∞–∫ –º–æ–∂–Ω–æ —Ä–µ—à–∏—Ç—å {markdown.hbold('—Ç–µ–∫—É—â–∏–µ –∂–∏–∑–Ω–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã')} –∏ –∏–∑–±–µ–∂–∞—Ç—å {markdown.hbold('–¥–∞–ª—å–Ω–µ–π—à–∏—Ö –Ω–µ—É–¥–∞—á')} –≤ —Å–≤–æ–µ–º –∂–∏–∑–Ω–µ–Ω–Ω–æ–º –ø—É—Ç–∏\n\n–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ {markdown.hbold('–Ω–∞–ø–∏—Å–∞—Ç—å –¥–∞—Ç—É')} –∏ {markdown.hbold('–º–µ—Å—Ç–æ —Å–≤–æ–µ–≥–æ —Ä–æ–∂–¥–µ–Ω–∏—è')} –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è ‚Äî @your_mentoor üëà\n\n{markdown.hbold('üîÆ–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –º–µ—Å—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–æ!')}"
#         mrkup = types.InlineKeyboardMarkup()
#         mrkup.add(types.InlineKeyboardButton("üîÜ–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π —Ä–∞–∑–±–æ—Ä", url="https://t.me/soul_mento"))

#         users = await db_sendings.get_users_24h_autosending()
#         for user in users:
#             try:
#                 await bot.send_message(user, text_autosending_24h, parse_mode='html', reply_markup=mrkup)
#                 logger.info(f'ID: {user}. Got autosending_24h')
#                 await db_sendings.mark_got_24h_autosending(user)
#                 await asyncio.sleep(0.2)
#             except (exceptions.BotBlocked, exceptions.UserDeactivated, exceptions.ChatNotFound):
#                 logger.error(f'ID: {user}. DELETED')
#                 await db.delete_user(user)
#             except Exception as ex:
#                 logger.error(f'got error: {ex}')


# async def sending_message_48_h():
#     while True:
#         await asyncio.sleep(12)

#         text_autosending_48h = f"üßö‚Äç‚ôÇÔ∏è–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, –≤ {markdown.hbold('—ç—Ç–æ—Ç –∑–∞–º–µ—á–∞—Ç–µ–ª—å–Ω—ã–π –¥–µ–Ω—å')} —á–∏—Å–ª–æ –º–æ–∏—Ö {markdown.hbold('—É—á–µ–Ω–∏–∫–æ–≤')}, –ø–æ–ª—É—á–∏–≤—à–∏—Ö {markdown.hbold('–∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫—É—é –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é')} –≤ —ç—Ç–æ–º –≥–æ–¥—É ‚Äî {markdown.hbold('–ø—Ä–µ–≤—ã—Å–∏–ª–æ 1.500 —á–µ–ª–æ–≤–µ–∫')}\n\n–í —á–µ—Å—Ç—å —Ç–∞–∫–æ–≥–æ {markdown.hbold('–≤–∞–∂–Ω–æ–≥–æ —Å–æ–±—ã—Ç–∏—è')}, —è —Ö–æ—á—É —Å–¥–µ–ª–∞—Ç—å {markdown.hbold('–í–∞–º –ø–æ–¥–∞—Ä–æ–∫')} –∏ —Å–¥–µ–ª–∞—Ç—å {markdown.hbold('–±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π —Ä–∞–∑–±–æ—Äüéâ')}\n\n–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è {markdown.hbold('–±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ —Ä–∞–∑–±–æ—Ä–∞')} ‚Äî {markdown.hbold('–Ω–∞–ø–∏—à–∏—Ç–µ')} –º–Ω–µ –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è {markdown.hbold('–¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è')} ‚Äî @your_mentoorüëà\n\nü™Ñ{markdown.hbold('–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π —Ä–∞–∑–±–æ—Ä —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–µ—Ä–≤—ã—Ö 10 –Ω–∞–ø–∏—Å–∞–≤—à–∏—Ö')}"
#         mrkup = types.InlineKeyboardMarkup()
#         mrkup.add(types.InlineKeyboardButton("–ó–∞–±—Ä–∞—Ç—å –ø–æ–¥–∞—Ä–æ–∫üéÅ", url="https://t.me/soul_mento"))

#         users_for_autosending_1 = await db_sendings.get_users_48h_autosending()
#         for user in users_for_autosending_1:
#             try:
#                 await bot.send_message(user, text_autosending_48h, parse_mode='html', reply_markup=mrkup)
#                 logger.info(f'ID: {user}. Got autosending_text_48h')
#                 await db_sendings.mark_got_48h_autosending(user)
#                 await asyncio.sleep(0.2)
#             except (exceptions.BotBlocked, exceptions.UserDeactivated):
#                 logger.error(f'ID: {user}. DELETED')
#                 await db.delete_user(user)
#             except Exception as ex:
#                 logger.error(f'got error: {ex}')


# async def sending_message_72h():
#     while True:
#         await asyncio.sleep(12)

#         text = f'ü™ê–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, —Ö–æ—á—É —Å–æ–æ–±—â–∏—Ç—å, —á—Ç–æ –ø–æ—Å–ª–µ {markdown.hbold("–í–∞—à–∏—Ö –º–Ω–æ–≥–æ—á–∏—Å–ª–µ–Ω–Ω—ã—Ö –ø—Ä–æ—Å—å–±")} - —è {markdown.hbold("–æ—Ç–∫—Ä—ã–≤–∞—é –≤—Ç–æ—Ä–æ–π –ø–æ—Ç–æ–∫")} –∏ {markdown.hbold("—Ö–æ—á—É –ø–æ–¥–∞—Ä–∏—Ç—å 15-—Ç–∏")} —Å—á–∞—Å—Ç–ª–∏–≤—á–∏–∫–∞–º {markdown.hbold("–±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π —Ä–∞–∑–±–æ—Ä")}\n\nüôå–ï—Å–ª–∏ –í—ã {markdown.hbold("–≥–æ—Ç–æ–≤—ã –Ω–∞–π—Ç–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø—É—Ç—å –≤ —Å–≤–æ–µ–π –∂–∏–∑–Ω–∏")}, —Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ {markdown.hbold("–¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –º–Ω–µ –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è ‚Äî @your_mentoorüëà")}'
#         kb = types.InlineKeyboardMarkup()
#         kb.add(types.InlineKeyboardButton("–ü–æ–ª—É—á–∏—Ç—å —Ä–∞–∑–±–æ—Äüî±", url="https://t.me/soul_mento"))

#         users_for_autosending_1 = await db_sendings.get_users_72h_autosending()
#         for user in users_for_autosending_1:
#             try:
#                 await bot.send_message(user, text, parse_mode='html', reply_markup=kb)
#                 logger.info(f'ID: {user}. Got autosending_text_72h')
#                 await db_sendings.mark_got_72h_autosending(user)
#                 await asyncio.sleep(0.2)
#             except (exceptions.BotBlocked, exceptions.UserDeactivated):
#                 logger.exception(f'ID: {user}. DELETED')
#                 await db.delete_user(user)
#             except Exception as ex:
#                 logger.error(f'got error: {ex}')

# async def on_startup(_):
#     asyncio.create_task(sending_messages_2h())
#     #asyncio.create_task(sending_message_24_h())

try:
    executor.start_polling(dp)
finally:
    stop = True
    logger.info("–ë–æ—Ç –∑–∞–∫–æ–Ω—á–∏–ª —Ä–∞–±–æ—Ç—É")
